#!/bin/bash
set -e

PASSWORD="${CODER_PWD}"
echo "password: ${CODER_PWD}" >> /coder-config.yaml

# Default to "worker-0" if not specified (used as initial working directory)
DEFAULT_PROJECT="${CURRENT_PROJECT:-worker-0}"
PROJECTS_BASE_DIR="${PROJECTS_BASE_DIR:-/app}"

# Function to initialize a worker project
initialize_worker() {
    local project="$1"
    echo "Initializing worker: ${project}"
    
    # Create a temporary project-specific config
    local temp_config=$(mktemp)
    
    # Extract base config (excluding extensions since they're handled in Dockerfile)
    yq eval '.base | del(.extensions)' /app/.w0/w0.config.yaml > "${temp_config}"
    
    # Get project path from config
    local project_path="${PROJECTS_BASE_DIR}/${project}"
    local project_folder=$(yq eval ".projects.${project}.config.folder" /app/.w0/w0.config.yaml)
    local project_repo_path="${project_path}/${project_folder}"
    
    # Get project-specific settings (excluding extensions) and merge them with base
    yq eval-all 'select(fileIndex==0) * select(fileIndex==1)' \
        "${temp_config}" <(yq eval ".projects.${project}.aider" /app/.w0/w0.config.yaml) > "${temp_config}.new"
    mv "${temp_config}.new" "${temp_config}"
    
    echo "Configured ${project} at ${project_path}"
    
    # Create directory if it doesn't exist
    if [ ! -d "${project_path}" ]; then
        echo "Creating directory: ${project_path}"
        mkdir -p "${project_path}"
    fi
    
    # Configure git user
    CURRENT_DIR="$(pwd)"
    cd "${project_repo_path}"

    if git rev-parse --is-inside-work-tree >/dev/null 2>&1; then
        git config user.name "${GIT_NAME}"
        git config user.email "${GIT_EMAIL}"
    else
        echo "Current directory is NOT in a Git repository."
    fi

    # Create worktrees for the project if defined in config
    if yq eval ".projects.${project}.config.worktrees" /app/.w0/w0.config.yaml &>/dev/null; then
        echo "Setting up worktrees for project: ${project}"
        git worktree prune

        # For each worktree defined in the config
        for worktree in $(yq eval ".projects.${project}.config.worktrees[].name" /app/.w0/w0.config.yaml); do
            worktree_path="${project_path}/worktrees/${worktree}"
            worktree_branch="worktree-${worktree}"
            
            echo "Checking worktree: ${worktree} (path: ${worktree_path})"
            
            # Create the worktree if it doesn't exist
            if [ ! -d "${worktree_path}" ]; then
                echo "Creating worktree: ${worktree} at ${worktree_path} with branch ${worktree_branch}"
                cd "${project_repo_path}"
                # Create directory if it doesn't exist
                mkdir -p "$(dirname "${worktree_path}")"

                # Create the worktree with a new branch
                if [ -n "$(git branch --list "${worktree_branch}")" ]; then
                    if git worktree list | grep -q "${worktree_path}"; then
                        echo "Worktree '${worktree_path}' exists."
                    else
                        git worktree add "${worktree_path}" "${worktree_branch}"
                    fi                
                else
                    git worktree add "${worktree_path}" -b "${worktree_branch}"
                fi

                cd "${CURRENT_DIR}"
            fi
        done
    fi

    cd "${CURRENT_DIR}"
    
    # Create .envrc file for direnv
    mkdir -p "${project_path}/.w0"
    cat > "${project_path}/.envrc" <<EOF
# Generated by w0.sh for project: ${project}
export CURRENT_PROJECT=${project}
export CURRENT_PROJECT_PATH=${project_path}
export CLUSTER_CONFIG_PATH=${temp_config}
EOF
    
    # Allow the .envrc file
    if command -v direnv &> /dev/null; then
        (cd "${project_path}" && direnv allow)
    fi
    
    # Store config path for future reference
    echo "${temp_config}" > "${project_path}/.w0/config_path"
    
    # Return the project path so we can use it later
    echo "${project_path}"
}

# Check if yq is installed
if ! command -v yq &> /dev/null; then
    echo "Error: yq is not installed. Cannot parse YAML configuration."
    exit 1
fi

# Get all project keys
PROJECTS=($(yq eval '.projects | keys | .[]' /app/.w0/w0.config.yaml))

if [ ${#PROJECTS[@]} -eq 0 ]; then
    echo "Error: No projects defined in configuration file."
    exit 1
fi

echo "Found ${#PROJECTS[@]} projects in configuration."

# Initialize each worker
for project in "${PROJECTS[@]}"; do
    # Create project directory if needed
    project_path=$(yq eval ".projects.${project}.config.folder" /app/.w0/w0.config.yaml)
    
    if [ -z "${project_path}" ]; then
        echo "Warning: No path defined for project ${project}, skipping."
        continue
    fi
    
    # Make sure the directory exists (will be created by initialize_worker)
    initialize_worker "${project}"
done

# Change to the default project directory
DEFAULT_PROJECT_PATH="/${PROJECTS_BASE_DIR}/${DEFAULT_PROJECT}/$(yq eval ".projects.${DEFAULT_PROJECT}.config.folder" /app/.w0/w0.config.yaml 2>/dev/null || echo "app")"

if [[ -d "${DEFAULT_PROJECT_PATH}" ]]; then
    echo "Setting default project to: ${DEFAULT_PROJECT} (${DEFAULT_PROJECT_PATH})"
    cd "${DEFAULT_PROJECT_PATH}"
else
    echo "Warning: Default project path ${DEFAULT_PROJECT_PATH} does not exist, falling back to base directory."
    cd "${PROJECTS_BASE_DIR}"
fi

# Start VS Code server
~/.local/bin/code-server --config /coder-config.yaml \
    --bind-addr 0.0.0.0:4242
    
